<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent xmlns:fx="http://ns.adobe.com/mxml/2009"
					xmlns:s="library://ns.adobe.com/flex/spark"
					xmlns:mx="library://ns.adobe.com/flex/mx"
					xmlns:controls="gov.nsw.health.rp.corelib.views.controls.*"
					xmlns:controls1="gov.nsw.health.rp.reporting.views.controls.*"
					width="100%" height="100%" 
					show="toShow(event)"
					creationComplete="toShow(event)" autoLayout="true" currentState="state_both" 
					xmlns:controls2="gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.controls.*" 
					xmlns:parts="gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.parts.*" xmlns:monthfield="gov.nsw.health.rp.corelib.views.controls.monthfield.*">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.tlf_internal;
			
			import gov.nsw.health.rp.corelib.business.constants.RPConstants;
			import gov.nsw.health.rp.corelib.business.utilities.Utilities;
			import gov.nsw.health.rp.corelib.model.RPModel;
			import gov.nsw.health.rp.corelib.vos.datatypes.ChartVO;
			import gov.nsw.health.rp.corelib.vos.enums.EnumReportFormat;
			import gov.nsw.health.rp.reporting.business.constants.ReportingConstants;
			import gov.nsw.health.rp.reporting.controllers.printablereport.PrintableReportController;
			import gov.nsw.health.rp.reporting.controllers.resetableui.IResetableUI;
			import gov.nsw.health.rp.reporting.controllers.resetableui.ResetableUIControllerUtils;
			import gov.nsw.health.rp.reporting.controllers.restorableui.RestorableUIControllerUtils;
			import gov.nsw.health.rp.reporting.messages.ReportingLocationMessage;
			import gov.nsw.health.rp.reporting.views.ReportingModuleMainPM;
			import gov.nsw.health.rp.reporting.views.controls.ReportCalculationPopup;
			import gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.Debtors_TimeSeriesPHI_PagePM;
			import gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.events.SelectedDataChangeEvent;
			import gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.events.SelectedMonthChangeEvent;
			import gov.nsw.health.rp.reporting.views.pages.debtorstimeseriesphisnapshot.messages.DebtorsTimeSeriesPhiMessage;
			import gov.nsw.health.rp.reporting.vos.messagetypes.requests.debtorstimeseriesphisnapshot.GetPhiDebtorsTimeSeriesRequestVO;
			
			import mx.charts.DateTimeAxis;
			import mx.collections.ArrayCollection;
			import mx.core.IVisualElement;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.StateChangeEvent;
			import mx.managers.PopUpManager;
			
			import org.as3commons.lang.DateUtils;
			
			import spark.events.IndexChangeEvent;
			//=======================================================================
			// 
			[Bindable]public var appScreenID:int;
			[Bindable]public var appScreenLabel:String='';
			//=======================================================================
			// Parsley Framework	
			[Bindable][Inject]public var rpModel:RPModel;
			[Bindable][Inject]public var timeSeriesPHIPM:Debtors_TimeSeriesPHI_PagePM;		
			[Bindable][Inject]public var mainViewPM:ReportingModuleMainPM;				
			[Init]public function toInit():void
			{ 					
			}				
			[PreDestroy] public function destroy():void
			{
				closeReportCalculationPopup();
			}			
			//=======================================================================
			// Parsley Message Handlers
			[MessageHandler(selector="LocationChanged")]
			public function onLocationChanged(msg:ReportingLocationMessage):void 
			{		
				reload();				
			}			
			
			[MessageHandler(selector="Reporting_Debtors_TimeSeriesPhi_DataLoaded")]
			public function onDataLoaded(msg:DebtorsTimeSeriesPhiMessage):void 
			{		
				selectorOrganisation.reloadObjectList(timeSeriesPHIPM.allOrganisationList);
				selectorPHI.reloadObjectList(timeSeriesPHIPM.allPHIList);
				selectorInvoiceType.reloadObjectList(timeSeriesPHIPM.allInvoiceTypeList);
				//??? Draw Charts
				//??? Build Data Grid
				dataView.headlinePeriodRecordList = timeSeriesPHIPM.headerinePeriodRecordList;  
				dataView.PHIRecordList = timeSeriesPHIPM.PHIRecordList;
				dataView.reload();
				
				
			}	
			//=======================================================================
			// Reset, Load, Reload and Refresh
			protected function toShow(event:FlexEvent):void
			{
				reportCalculationPopup.addEventListener(CloseEvent.CLOSE, titlewindow1_closeHandler);
				resetUI();				
			}			
			
			public function resetUI():void
			{
				reload();
			}			
			
			public function reload():void
			{
				var nowDate:Date=new Date();				
				var monthEndDate:Date;
				var lastSunDayDate:Date;
				if(dateSelector.selectedDate==null) return;
				var selectedYear:int=dateSelector.selectedDate.fullYear;
				var selectedMonth:int=dateSelector.selectedDate.month;
				
				if(selectedYear == nowDate.fullYear && selectedMonth == nowDate.month)
				{	
					if(selectedMonth<1)
						monthEndDate = new Date(nowDate.fullYear-1,11,31);
					else
						monthEndDate = getMonthEndDate(selectedYear,selectedMonth-1);							
					lastSunDayDate=getLastSundayDate(nowDate);
				} else 
				{
					monthEndDate = getMonthEndDate(selectedYear,selectedMonth);	
					lastSunDayDate=getLastSundayDate(monthEndDate);
				}
				
				if(this.radioButtonMonthly.selected)			
					timeSeriesPHIPM.askToGetDebtorsTimeSeriesPHIRecords(monthEndDate,true);
				else
					timeSeriesPHIPM.askToGetDebtorsTimeSeriesPHIRecords(lastSunDayDate,false);
			}
			
			protected function btnRefresh_clickHandler(event:MouseEvent):void
			{
				reload();
			}
			
			protected function btnReset_clickHandler(event:MouseEvent):void
			{
				resetUI();
			}
			
			private function getMonthEndDate(year:int,month:int):Date
			{	//0 for January, 1 for February, and so on
				if(month>=11) 
					return new Date(year,11,31);
				else
					return new Date(year,month+1,0);				
			}			
			private function getLastSundayDate(dt:Date):Date
			{	//0 for January, 1 for February, and so on
				return DateUtils.addDays(dt,-dt.day);				
			}
			//================================================================================
			// Date choose and change
						
			protected function btnForward_clickHandler(event:MouseEvent):void
			{	
			}			
			protected function btnBackwardMost_clickHandler(event:MouseEvent):void
			{	
			}			
			protected function btnBackward_clickHandler(event:MouseEvent):void
			{				
			}			
			protected function btnForwardMost_clickHandler(event:MouseEvent):void
			{	
			}			
			
			//================================================================================
			// Data Selection Modes			
			
			[Bindable]private var dataSelectionModeList:ArrayCollection = new ArrayCollection([  
				{label : "$ Invoiced + Receipted", showCount : false, invoiced: true, receipted:true,unpaid:false},
				{label : "# Invoiced + Receipted", showCount : true, invoiced: true, receipted:true,unpaid:false},
				{label : "$ Invoiced", showCount : false, invoiced: true, receipted:false,unpaid:false}, 
				{label : "# Invoiced", showCount : true, invoiced: true, receipted:false,unpaid:false},
				{label : "$ Receipted", showCount : false, invoiced: false, receipted:true,unpaid:false},
				{label : "# Receipted", showCount : true, invoiced: false, receipted:true,unpaid:false},
				{label : "# Unpaid", showCount : true, invoiced: false, receipted:false,unpaid:true},
				{label : "$ Unpaid", showCount : false, invoiced: false, receipted:false,unpaid:true}
			]);		
			
			protected function ddlDataSelectionMode_changeHandler(event:IndexChangeEvent):void
			{
				var obj:Object=ddlDataSelectionMode.selectedItem;
				if(obj==null) return;				
				timeSeriesPHIPM.dataSelectionMode_showCount = obj["showCount"]; 
				timeSeriesPHIPM.dataSelectionMode_invoiced= obj["invoiced"]; 
				timeSeriesPHIPM.dataSelectionMode_receipted= obj["receipted"];
				timeSeriesPHIPM.dataSelectionMode_unpaid= obj["unpaid"];
				
				this.dataView.toShowCount = timeSeriesPHIPM.dataSelectionMode_showCount; 
				this.dataView.reload();
				
				timeSeriesPHIPM.prepareChartDatasForGRaphicsView();		
				this.graphView.toShowCount = timeSeriesPHIPM.dataSelectionMode_showCount;
				this.graphView.reload();
				//------------------------ Change selected PHI list: top 3 ones.????????
			}	
			
			protected function dateSelector_changeHandler(event:IndexChangeEvent):void
			{
				// TODO Auto-generated method stub
				
			}
			
			//================================================================================
			// Filters			
			
			protected function selectorOrganisation_changeHandler(event:SelectedDataChangeEvent):void
			{				
				
			}
			
			protected function selectorPHI_changeHandler(event:SelectedDataChangeEvent):void
			{				
				
			}
			
			protected function selectorInvoiceType_changeHandler(event:SelectedDataChangeEvent):void
			{				
				
			}
			
			//================================================================================
			// Resize the child views
			private function resizeChildViews(event:StateChangeEvent):void
			{
				if(graphView.currentState=='minimised' && dataView.currentState=='maximised')
					this.currentState="state_data";
				else if(graphView.currentState=='maximised' && dataView.currentState=='minimised')
					this.currentState="state_graph";
				else 
				{
					dataView.currentState=graphView.currentState='maximised'; 
					this.currentState="state_both";
				}
			}	
			//================================================================================
			// Print Reports
			protected function btnPrintPDFAllData_clickHandler(event:MouseEvent):void
			{
				PrintableReportController.controllerInstance.downloadReport(this, EnumReportFormat.PDF);
				
			}					
			protected function btnPrintExcelFile_clickHandler(event:MouseEvent):void
			{
				PrintableReportController.controllerInstance.downloadReport(this, EnumReportFormat.EXCEL);
			}			
			
			//===============================================================================
			//Start implementing IReportCalulationPopUpHolder interface
			private var _reportCalculationPopup:ReportCalculationPopup = new ReportCalculationPopup();
			public function get reportCalculationPopup():ReportCalculationPopup
			{
				return _reportCalculationPopup;
			}			
			
			public function closeReportCalculationPopup():void
			{
				if(reportCalculationPopup!=null)
				{
					PopUpManager.removePopUp(reportCalculationPopup);					
				}
				
				if(chbxShowReportCalculations!=null)
				{
					chbxShowReportCalculations.selected = false;
				}
			}
			
			protected function chbxShowReportCalculations_changeHandler(event:Event):void
			{
				if(chbxShowReportCalculations.selected)
				{
					PrintableReportController.controllerInstance.updateCurrentReportBySearching(this);
					PopUpManager.addPopUp(reportCalculationPopup,this,false);					
					
				}else
				{
					PopUpManager.removePopUp(reportCalculationPopup);
				}		
			
			}
			protected function titlewindow1_closeHandler(event:CloseEvent):void
			{
				PopUpManager.removePopUp(reportCalculationPopup);
				chbxShowReportCalculations.selected = false;
			}
			
			//END implementing IReportCalulationPopUpHolder interface
			//================================================================================
			
			
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:RadioButtonGroup id="radioButtonGroup_Monthly_Weekly" />
	</fx:Declarations>		
	
	<s:states>
		<s:State name="state_both"/>STATEA
		<s:State name="state_graph"/>STATEB
		<s:State name="state_data"/>STATEC
	</s:states>
	
	<s:layout>
		<s:VerticalLayout gap="5" paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"/>
	</s:layout>	
	
	<s:HGroup id="row1_PageTitle" width="100%" height="30" clipAndEnableScrolling="true" horizontalAlign="left" paddingTop="0" verticalAlign="middle">
		<s:Label color="{RPConstants.Color_Dark_Blue}" fontSize="20" fontWeight="bold" paddingTop="5"
				 text="{rpModel.user.getScreenName(appScreenID) + ' for '+ this.mainViewPM.locationController.curLocationName + ' as at '}"/>
		<!--
		controls2:YearMonthSelector id="dateSelector" selectedMonthChange="yearmonthselector1_selectedMonthChangeHandler(event)" /
		-->
		<monthfield:SparkMonthField id="dateSelector" change="dateSelector_changeHandler(event)" 
			minYearMonth="{new Date(2012,0,1)}" maxYearMonth="{new Date()}"									
			skinClass="gov.nsw.health.rp.corelib.views.controls.monthfield.SparkMonthFieldSkin">

		</monthfield:SparkMonthField>			
		<s:CheckBox id="chbxShowReportCalculations" change="chbxShowReportCalculations_changeHandler(event)" label="Display calculation"/>		
		<s:HGroup width="100%" horizontalAlign="right" paddingRight="5" verticalAlign="middle" gap="5">
			<controls:ImageButton id="btnRefresh" toolTip="Click to refresh data on your screen"										
										source="{gov.nsw.health.rp.corelib.business.constants.EmbedAssets.refresh_ICON}"
										click="btnRefresh_clickHandler(event)"/>
			<controls:RPViewButtonBase id="btnReset" label="Reset"
									   backgroundColor1="{RPConstants.Color_Sky_Blue_1}"
									   backgroundColor2="{RPConstants.Color_Sky_Blue_2}"
									   click="btnReset_clickHandler(event)"/>
			<controls:ImageButton id="btnPrintExcelFile"  source="{gov.nsw.health.rp.corelib.business.constants.EmbedAssets.CSV_FILE_ICON}"
								  toolTip="Click to print data as an Excel file" 
								  click="btnPrintExcelFile_clickHandler(event)"
								  />			
			<!-- RF20151123: Added the next button to open the PDf report export -->
			<controls:ImageButton id="btnPrintPDFAllData"  source="{gov.nsw.health.rp.corelib.business.constants.EmbedAssets.PDF_FILE_ICON}"
								  click="{btnPrintPDFAllData_clickHandler(event);}" 
								  toolTip="Print all data as a PDF file" />
			
		</s:HGroup>
	</s:HGroup>

	<s:HGroup id="row2_Filters" width="100%" clipAndEnableScrolling="true" horizontalAlign="left" paddingTop="0" verticalAlign="middle">
		<s:VGroup width="100%">
			<controls2:SelectionDataGroup_BorderContainer id="selectorOrganisation" headerText="Organisation:" width="100%" minHeight="20" 
				hasAllCheckBox="true"  allObjectList="{timeSeriesPHIPM.allOrganisationList}" preselectAll="true" change="selectorOrganisation_changeHandler(event)" />
			<controls2:SelectionDataGroup_BorderContainer id="selectorPHI" headerText="PHI:" width="100%" minHeight="20" 
			  	hasAllCheckBox="false" allObjectList="{timeSeriesPHIPM.allPHIList}" preselectAll="false" change="selectorPHI_changeHandler(event)" />
			<controls2:SelectionDataGroup_BorderContainer id="selectorInvoiceType"  headerText="Invoice Types:" width="100%" minHeight="20" 
				hasAllCheckBox="true" allObjectList="{timeSeriesPHIPM.allInvoiceTypeList}" preselectAll="true" change="selectorInvoiceType_changeHandler(event)" />			
		</s:VGroup>
		<s:VGroup height="100%" verticalAlign="top" id="grdReset" gap="5" >								
			<controls:RPViewButtonBase id="btnResetFiter" label="Reset Filters" backgroundColor1="{RPConstants.Color_Sky_Blue_1}" backgroundColor2="{RPConstants.Color_Sky_Blue_2}"
				click="btnReset_clickHandler(event)" width="84"/>
			<s:HGroup verticalAlign="bottom" >
				<s:Label text="Display" fontWeight="bold" />
				<s:RadioButton id="radioButtonMonthly" label="Monthly" groupName="radioButtonGroup_Monthly_Weekly" selected="true" />
				<s:RadioButton id="radioButtonWeekly" label="Weekly" groupName="radioButtonGroup_Monthly_Weekly" />
			</s:HGroup>
			<s:HGroup verticalAlign="bottom" >
				<s:Button id="btnBackwardMost" label="&lt;&lt;" fontWeight="bold" width="40" click="btnBackwardMost_clickHandler(event)" />
				<s:Button id="btnBackward" label="&lt;" fontWeight="bold" width="30" click="btnBackward_clickHandler(event)" />
				<s:Button id="btnForward" label="&gt;" fontWeight="bold" width="30" click="btnForward_clickHandler(event)" />
				<s:Button id="btnForwardMost" label="&gt;&gt;" fontWeight="bold" width="40" click="btnForwardMost_clickHandler(event)" />				
			</s:HGroup>
			
			
			<s:DropDownList id="ddlDataSelectionMode" dataProvider="{dataSelectionModeList}" labelField="label" width="100%" selectedIndex="0" requireSelection="true"
						 change="ddlDataSelectionMode_changeHandler(event)"	
						 skinClass="gov.nsw.health.rp.corelib.views.skins.RPDropDownLongListSkin" />
			
			
		</s:VGroup>		
	</s:HGroup>
	
	<parts:Debtors_TimeSeriesPHI_GraphView id="graphView" width="100%" currentStateChange="{resizeChildViews(event)}"  
		chartDataObjectList="{timeSeriesPHIPM.chartDataObjectList}" 	
		chartLineSeriesList="{timeSeriesPHIPM.chartLineSeriesList}" 										   
		height.state_both="50%" height.state_graph="100%" height.state_data="50" />
	<parts:Debtors_TimeSeriesPHI_DataView id="dataView" width="100%" currentStateChange="{resizeChildViews(event)}" 
		height.state_both="50%" height.state_graph="50" height.state_data="100%" />
	
</s:NavigatorContent>

<!--<s:VGroup id="grpExportReport" gap="0"  paddingTop="0" paddingLeft="0" paddingRight="0" paddingBottom="0" >				

<controls:ImageButton id="popupPrintPDF"  source="{gov.nsw.health.rp.corelib.business.constants.EmbedAssets.PDF_FILE_ICON}"
toolTip="Click to print Screen or All Data as a PDF file" 
click="{popUpAnchor.displayPopUp=!popUpAnchor.displayPopUp; grpPopUpAnchor.setFocus()}"
/>

<s:PopUpAnchor id="popUpAnchor" left="0" bottom="0" popUpPosition="right">

<s:VGroup id="grpPopUpAnchor" width="150" gap="0"  paddingTop="0" paddingLeft="2" paddingRight="-20" paddingBottom="2"
focusOut="{popUpAnchor.displayPopUp=false}" >

<s:Button width="100%" id="btnPrintPDFScreen" label="Print Screen" 
click="{btnPrintPDFScreen_clickHandler(event);popUpAnchor.displayPopUp=false}" 
toolTip="Print screen as a PDF file"  />



<s:Button width="100%" id="btnPrintPDFAllData" label="Print All"  
click="{btnPrintPDFAllData_clickHandler(event);popUpAnchor.displayPopUp=false}" 
toolTip="Print all data as a PDF file" />					
</s:VGroup>

</s:PopUpAnchor>				
</s:VGroup>				
-->
